#pf, DHA-PPQ
for(i in 1:217){
p[i]=impact_malaria2015(i,'DHA-PPQ',F)
}
pf_dpM_2015=sum(unlist(p)[is.finite(unlist(p))],na.rm=T)
#pf, DHA-PPQ+PQ
for(i in 1:217){
p[i]=impact_malaria2015(i,'DHA-PPQ+PQ',F)
}
pf_dppM_2015=sum(unlist(p)[is.finite(unlist(p))],na.rm=T)
#pf, PQ
for(i in 1:217){
p[i]=impact_malaria2015(i,'PQ',F)
}
pf_pqM_2015=sum(unlist(p)[is.finite(unlist(p))],na.rm=T)
#pf, QN
for(i in 1:217){
p[i]=impact_malaria2015(i,'QN',F)
}
pf_qnM_2015=sum(unlist(p)[is.finite(unlist(p))],na.rm=T)
#pf, QN+CL
for(i in 1:217){
p[i]=impact_malaria2015(i,'QN+CL',F)
}
pf_qcM_2015=sum(unlist(p)[is.finite(unlist(p))],na.rm=T)
#pf, QN+D
for(i in 1:217){
p[i]=impact_malaria2015(i,'QN+D',F)
}
pf_qdM_2015=sum(unlist(p)[is.finite(unlist(p))],na.rm=T)
#pv, CQ+PQ
for(i in 1:217){
p[i]=impact_malaria2015(i,'CQ+PQ',T)
}
pv_cpM_2015=sum(unlist(p)[is.finite(unlist(p))],na.rm=T)
#pv, CQ
for(i in 1:217){
p[i]=impact_malaria2015(i,'CQ',T)
}
pv_cqM_2015=sum(unlist(p)[is.finite(unlist(p))],na.rm=T)
#pv, DHA-PPQ
for(i in 1:217){
p[i]=impact_malaria2015(i,'DHA-PPQ',T)
}
pv_dpM_2015=sum(unlist(p)[is.finite(unlist(p))],na.rm=T)
#pv, AL
for(i in 1:217){
p[i]=impact_malaria2015(i,'AL',T)
}
pv_alM_2015=sum(unlist(p)[is.finite(unlist(p))],na.rm=T)
#pv, AS+AQ+PQ
for(i in 1:217){
p[i]=impact_malaria2015(i,'AS+AQ+PQ',T)
}
pv_aapM_2015=sum(unlist(p)[is.finite(unlist(p))],na.rm=T)
#pv, AL+PQ
for(i in 1:217){
p[i]=impact_malaria2015(i,'AL+PQ',T)
}
pv_apM_2015=sum(unlist(p)[is.finite(unlist(p))],na.rm=T)
pf_aaM_2015+pv_aapM_2015+
pf_ampM_2015+pf_asM_2015+pf_aspM_2015+pf_cpM_2015+pv_cpM_2015
View(Malaria2015)
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/Malaria2015.RData')
## assign fallback data
mean1 = c(0.98,	1.00	,0.90	,0.90	,0.94	,0.89	,0.97	,0.96	,0.90	,0.94	,0.96	,0.42	,0.98	,0.84	,0.83	,0.94	,0.90,	0.91)
mean2 = c(0.98	,0.90	,0.97	,0.89,	0.97,	0.97)
#p.falc
for (i in 1:18){
Malaria2015[is.na(Malaria2015[,i+17]),i+35] = mean1[i] - a
}
#p.vivax
for (q in 1:6){
Malaria2015[is.na(Malaria2015[,q+60]),q+66] = mean2[q] - a
}
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/HIV2015.RData')
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/HIV2015_drugR.RData')
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/NTD2015.RData')
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/TB2015.RData')
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/TBass2015.RData')
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/Malaria2015.RData')
impact_malaria2015(47,'AS+AQ',F)
impact_malaria2015(47,'AS+AQ',T)
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/Malaria2015.RData')
names(Malaria2015)#1-53 is p.falc, 54-72 is p.vivax
impact_malaria2015=function(country,drug,pv){
if(pv==T){
xp=Malaria2015[country,c(54:72)]
xp[is.na(xp)]=0
if(drug==xp[1]|drug==xp[2]){
sp=xp[5]*xp[7]*xp[names(xp)==paste('pv',drug)]/
(1-xp[7]*xp[names(xp)==paste('pv',drug)])/xp[3]
as.numeric(sp)}
else if(xp[1]=='ALLD'|xp[2]=='ALLD'){
sp=xp[5]*xp[7]*xp[names(xp)==paste('pv',drug)]/
(1-xp[7]*xp[names(xp)==paste('pv',drug)])/7
as.numeric(sp)
}
else{0}
}
else{
x=Malaria2015[country,c(1:53)]
x[is.na(x)]=0
if(drug==x[4]|drug==x[5]|drug==x[6]|drug==x[7]|drug==x[8]){
s=x[15]*x[names(x)==drug]*x[10]/(1-x[names(x)==drug]*x[10])/x[9]
as.numeric(s)}
else if(x[4]=='ALLD'|x[5]=='ALLD'|x[6]=='ALLD'|x[7]=='ALLD'|x[8]=='ALLD'){
s=x[15]*x[names(x)==drug]*x[10]/(1-x[names(x)==drug]*x[10])/18
as.numeric(s)
}
else{0}
}
}
impact_malaria2015(47,'AS+AQ',F)
impact_malaria2015(36,'AS+AQ',F)
pf_alM_2015+pv_alM_2015
View(TBass2010)
View(TBass2013)
View(TBass2010)
View(TBass2015)
View(TB2015)
a=0.15
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/HIV2013.RData')
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/HIV2013_drugR.RData')
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/NTD2013.RData')
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/TB2013.RData')
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/TBass2013.RData')
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/Malaria2013.RData')
## assign fallback data
mean1 = c(0.98	,0.89,	0.89,	0.89,	0.94,	0.88,	0.97	,0.96,	0.90,	0.94,	0.96,	0.42,	0.98,	0.89,	0.83,	0.94	,0.89	,0.91)
mean2 = c(0.96,	0.92,	0.91	,0.78,	0.24	,0.97,	0.97,	0.52)
#p.falc
for (i in 1:18){
Malaria2013[is.na(Malaria2013[,i+17]),i+35] = mean1[i] - a
}
#p.vivax
for (q in 1:8){
Malaria2013[is.na(Malaria2013[,q+60]),q+68] = mean2[q] - a
}
u = cs_2013()
write.csv(u, "/Users/dxk-Ben/Desktop/yo.csv")
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/Malaria2013.RData')
names(Malaria2013)#1-53 is p.falc, 54-76 is p.vivax
impact_malaria2013=function(country,drug,pv){
if(pv==T){
xp=Malaria2013[country,c(54:76)]
xp[is.na(xp)]=0
if(drug==xp[1]|drug==xp[2]){
sp=xp[5]*xp[7]*xp[names(xp)==paste('pv',drug)]/
(1-xp[7]*xp[names(xp)==paste('pv',drug)])/xp[3]
as.numeric(sp)
}
else if(xp[1]=='ALLD'|xp[2]=='ALLD'){
sp=xp[5]*xp[7]*xp[names(xp)==paste('pv',drug)]/
(1-xp[7]*xp[names(xp)==paste('pv',drug)])/8
as.numeric(sp)
}
else{0}
}
else{
x=Malaria2013[country,c(1:53)]
x[is.na(x)]=0
if(drug==x[4]|drug==x[5]|drug==x[6]|drug==x[7]|drug==x[8]){
s=x[15]*x[names(x)==drug]*x[10]/(1-x[names(x)==drug]*x[10])/x[9]
as.numeric(s)
}
else if(x[4]=='ALLD'|x[5]=='ALLD'|x[6]=='ALLD'|x[7]=='ALLD'|x[8]=='ALLD'){
s=x[15]*x[names(x)==drug]*x[10]/(1-x[names(x)==drug]*x[10])/17
as.numeric(s)
}
else{0}
}
}
impact_malaria2013(1,'AS+SP+PQ',F)
impact_malaria2013(6,'AL',F)
impact_malaria2013(1,'CQ+PQ',T)
u1 = cs_2013()
u = cs_2013()
## assign fallback data
mean1 = c(0.98	,0.89,	0.89,	0.89,	0.94,	0.88,	0.97	,0.96,	0.90,	0.94,	0.96,	0.42,	0.98,	0.89,	0.83,	0.94	,0.89	,0.91)
mean2 = c(0.96,	0.92,	0.91	,0.78,	0.24	,0.97,	0.97,	0.52)
#p.falc
for (i in 1:18){
Malaria2013[is.na(Malaria2013[,i+17]),i+35] = mean1[i] - a
}
#p.vivax
for (q in 1:8){
Malaria2013[is.na(Malaria2013[,q+60]),q+68] = mean2[q] - a
}
u = cs_2013()
write.csv(u, "/Users/dxk-Ben/Desktop/yo.csv")
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/HIV2015.RData')
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/HIV2015_drugR.RData')
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/NTD2015.RData')
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/TB2015.RData')
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/TBass2015.RData')
load('/Users/dxk-Ben/Desktop/Sensitivity Analysis/R Data/Malaria2015.RData')
## assign fallback data
mean1 = c(0.98,	1.00	,0.90	,0.90	,0.94	,0.89	,0.97	,0.96	,0.90	,0.94	,0.96	,0.42	,0.98	,0.84	,0.83	,0.94	,0.90,	0.91)
mean2 = c(0.98	,0.90	,0.97	,0.89,	0.97,	0.97)
#p.falc
for (i in 1:18){
Malaria2015[is.na(Malaria2015[,i+17]),i+35] = mean1[i] - a
}
#p.vivax
for (q in 1:6){
Malaria2015[is.na(Malaria2015[,q+60]),q+66] = mean2[q] - a
}
u = cs_2015()
write.csv(u, "/Users/dxk-Ben/Desktop/yo.csv")
View(TBass2015)
a=rep(1,300)
a=rep(1,300)
b = rnorm(300,0,40)
e = rnorm(300,0,4)
y = a + 0.9*b + e
acf(y)
summary(acf(y))
pacf(y)
acf(y)
y = a + 0.9*b[4:300] + 0.8*b[3:299] + 0.5*b[2:298] + 0.2*b[1:297] + e
a = rep(1,296)
b = rnorm(300,0,40)
e = rnorm(296,0,4)
y = a + 0.9*b[4:300] + 0.8*b[3:299] + 0.5*b[2:298] + 0.2*b[1:297] + e
a = rep(1,297)
b = rnorm(300,0,40)
e = rnorm(297,0,4)
y = a + 0.9*b[4:300] + 0.8*b[3:299] + 0.5*b[2:298] + 0.2*b[1:297] + e
acf(y)
pacf(y)
acf(y)
acf(y)
pacf(y)
plot(y)
shift
c = shift(b, n=1L, fill=NA, type='lag', give.names=FALSE)
install.packages("data.table")
library('data.table')
c = shift(b, n=1L, fill=NA, type='lag', give.names=FALSE)
c = shift(b, n=2L, fill=NA, type='lag', give.names=FALSE)
c = shift(b, n=3L, fill=NA, type='lag', give.names=FALSE)
plot(y,type = 'l')
b = runif(365,1000)
b = rep(1000,365)
y = a + 0.9*b[4:300] + 0.8*b[3:299] + 0.5*b[2:298] + 0.2*b[1:297] + e
plot(y,type = 'l')
a = rep(1,297)
b = rep(1000,365)
e = rnorm(297,0,1)
y = a + 0.9*b[4:300] + 0.8*b[3:299] + 0.5*b[2:298] + 0.2*b[1:297] + e
plot(y,type = 'l')
plot(y,type = 'l',ylim = c(1000,6000))
plot(y,type = 'l',ylim = c(1000,2000))
plot(y,type = 'l',ylim = c(1000,4000))
plot(y,type = 'l')
plot(y,type = 'l',ylim = c(2200,2400))
plot(y,type = 'l',ylim = c(2200,2500))
plot(y,type = 'l',ylim = c(2300,2500))
y = a + 0.9*b[4:365] + 0.8*b[3:364] + 0.5*b[2:363] + 0.2*b[1:362] + e
a = rep(1,362)
b = rep(1000,365)
e = rnorm(362,0,1)
y = a + 0.9*b[4:365] + 0.8*b[3:364] + 0.5*b[2:363] + 0.2*b[1:362] + e
plot(y,type = 'l',ylim = c(2300,2500))
362/30
y[rep(30,12)] = y[rep(30,12)]*3
plot(y,type = 'l',ylim = c(2300,2500))
rep(30,12)
replicate(12,30,2)
for (i in 1:12){
y[i*30] = y[i*30]*3
y[(i*30)+1] = y[(i*30)+1]*6
}
plot(y,type = 'l',ylim = c(2300,2500))
plot(y,type = 'l',ylim = c(2300,5000))
plot(y,type = 'l',ylim = c(2300,15000))
a = rep(1,362)
b = rep(1000,365)
e = rnorm(362,0,1)
y = a + 0.9*b[4:365] + 0.8*b[3:364] + 0.5*b[2:363] + 0.2*b[1:362] + e
for (i in 1:6){
y[i*30] = y[i*30]*3
y[(i*30)+1] = y[(i*30)+1]*6
}
plot(y,type = 'l',ylim = c(2300,15000))
acf(y)
pacf(y)
setwd("~/Desktop/advanced macro")
data = read.csv('SCFP2007')
data = read.csv('SCFP2007.xlsx')
data = readxl::excel_format('SCFP2007.xlsx')
data = readxl::excel_format('SCFP2007.xlsx')
data = readxl::excel_sheets('SCFP2007.xlsx')
data = read.table('SCFP2007.xlsx')
data = readxl::read_xlsx('SCFP2007.xlsx')
View(data)
View(data)
View(data)
y = data[,c(1:3,data$WAGEINC,data$INCOME,data$INCCAT,data$BUSSEFARMINC,data$INTDIVINC,data$SSRETINC,
data$KGINC)]
y = data[c(1:3,data$WAGEINC,data$INCOME,data$INCCAT,data$BUSSEFARMINC,data$INTDIVINC,data$SSRETINC,
data$KGINC)]
y = c(data$YY1,data$Y1,data$WGT,data$WAGEINC,data$INCOME,data$INCCAT,data$BUSSEFARMINC,data$INTDIVINC,data$SSRETINC,
data$KGINC)
y = data.frame(data$YY1,data$Y1,data$WGT,data$WAGEINC,
data$INCOME,data$INCCAT,data$BUSSEFARMINC,data$INTDIVINC,data$SSRETINC,data$KGINC)
View(y)
y$earining = y$data.INCOME +  0.863*y$data.BUSSEFARMINC
y[,4:10] = y[,4:10]*0.88
y$earining = y$data.INCOME +  0.863*y$data.BUSSEFARMINC
y = data.frame(data$YY1,data$Y1,data$WGT,data$WAGEINC,
data$INCOME,data$INCCAT,data$BUSSEFARMINC,data$INTDIVINC,
data$SSRETINC,data$KGINC)  ## income
y[,4:10] = y[,4:10]*0.88
y$earining = y$data.INCOME +  0.863*y$data.BUSSEFARMINC
setwd("~/Documents/GitHub/ps1-data-dxkdxkdxkdxk")
e_quantiles = quantiles(y$earining,probs=seq(0,1,0.1))
e_quantiles = quantile(y$earining,probs=seq(0,1,0.1))
e_quantiles = quantile(y$earining/100,probs=seq(0,1,0.1))
y = data.frame(data$YY1,data$Y1,data$WGT,data$WAGEINC,
data$INCOME,data$INCCAT,data$BUSSEFARMINC,data$INTDIVINC,
data$SSRETINC,data$KGINC)  ## income
y[,4:10] = y[,4:10]*0.88  # converting 2016 USD to 2007 USD
y$earining = y$data.INCOME #+  0.863*y$data.BUSSEFARMINC # constructing earning
e_quantiles = quantile(y$earining/100,probs=seq(0,1,0.1))
y = data.frame(data$YY1,data$Y1,data$WGT,data$WAGEINC,
data$INCOME,data$INCCAT,data$BUSSEFARMINC,data$INTDIVINC,
data$SSRETINC,data$KGINC)  ## income
y[,4:10] = y[,4:10]*0.88  # converting 2016 USD to 2007 USD
y$earining = y$data.INCOME +  (1-0.863)*y$data.BUSSEFARMINC # constructing earning
e_quantiles = quantile(y$earining/100,probs=seq(0,1,0.1))
y$earining = y$data.INCOME +  0.863*y$data.BUSSEFARMINC # constructing earning
e_quantiles = quantile(y$earining/100,probs=seq(0,1,0.1))
e_quantiles
y$earining = y$data.WAGEINC +  0.863*y$data.BUSSEFARMINC # constructing earning
e_quantiles = quantile(y$earining/100,probs=seq(0,1,0.1))
e_quantiles = quantile(y$earining/1000,probs=seq(0,1,0.1))
e_quantiles
y$earining = y$data.WAGEINC +  (1-0.863)*y$data.BUSSEFARMINC # constructing earning
e_quantiles = quantile(y$earining/1000,probs=seq(0,1,0.1))
e_quantiles
y$earining = y$data.WAGEINC +  0.863*y$data.BUSSEFARMINC # constructing earning
e_quantiles = quantile(y$earining/1000,probs=seq(0,1,0.1))
e_quantiles
e_quantiles = quantile(y$earining/1000,probs=seq(0,1,0.05))
e_quantiles
e_quantiles = quantile(y$earining/1000,probs=c(0,0.01,0.05,0.1,0.2,0.4,0.6,0.8,0.9,0.95,0.99,1))
e_quantiles = data.frame(quantile(y$earining/1000,
probs=c(0,0.01,0.05,0.1,0.2,0.4,0.6,0.8,0.9,0.95,0.99,1)))
View(e_quantiles)
names(e_quantiles)[1] = "quantiles"
round(e_quantiles$quantiles,digits=2)
View(y)
View(e_quantiles)
e_quantiles$quantiles = round(e_quantiles$quantiles,digits=2)
sort(y$earining/1000)
sort(-y$earining/1000)
sort(y$earining/1000)
test = sort(y$earining/1000)
test
e_quantiles = data.frame(quantile(sort(y$earining/1000),
probs=c(0,0.01,0.05,0.1,0.2,0.4,0.6,0.8,0.9,0.95,0.99,1)))
names(e_quantiles)[1] = "quantiles"
e_quantiles$quantiles = round(e_quantiles$quantiles,digits=2)
y$earining = y$data.WAGEINC +  y$data.BUSSEFARMINC # constructing earning
e_quantiles = data.frame(quantile(y$earining/1000,
probs=c(0,0.01,0.05,0.1,0.2,0.4,0.6,0.8,0.9,0.95,0.99,1)))
names(e_quantiles)[1] = "quantiles"
e_quantiles$quantiles = round(e_quantiles$quantiles,digits=2)
plot(y$earining)
hist(y$earining)
y$earining = y$data.WAGEINC +  0.863*y$data.BUSSEFARMINC # constructing earning
e_quantiles = data.frame(quantile(y$earining/1000,
probs=c(0,0.01,0.05,0.1,0.2,0.4,0.6,0.8,0.9,0.95,0.99,1)))
names(e_quantiles)[1] = "quantiles"
e_quantiles$quantiles = round(e_quantiles$quantiles,digits=2)
y[,4:10] = y[,4:10]*0.88*y$data.WGT  # converting 2016 USD to 2007 USD
y$earining = y$data.WAGEINC +  0.863*y$data.BUSSEFARMINC # constructing earning
e_quantiles = data.frame(quantile(y$earining/1000,
probs=c(0,0.01,0.05,0.1,0.2,0.4,0.6,0.8,0.9,0.95,0.99,1)))
names(e_quantiles)[1] = "quantiles"
e_quantiles$quantiles = round(e_quantiles$quantiles,digits=2)
y[,4:10] = y[,4:10]*0.88  # converting 2016 USD to 2007 USD
y$earining = y$data.WAGEINC +  0.863*y$data.BUSSEFARMINC # constructing earning
e_quantiles = data.frame(quantile(y$earining/1000,
probs=c(0,0.01,0.05,0.1,0.2,0.4,0.6,0.8,0.9,0.95,0.99,1)))
names(e_quantiles)[1] = "quantiles"
e_quantiles$quantiles = round(e_quantiles$quantiles,digits=2)
y = data.frame(data$YY1,data$Y1,data$WGT,data$WAGEINC,
data$INCOME,data$INCCAT,data$BUSSEFARMINC,data$INTDIVINC,
data$SSRETINC,data$KGINC)  ## income
y[,4:10] = y[,4:10]*0.88  # converting 2016 USD to 2007 USD
y$earining = y$data.WAGEINC +  0.863*y$data.BUSSEFARMINC # constructing earning
e_quantiles = data.frame(quantile(y$earining/1000,
probs=c(0,0.01,0.05,0.1,0.2,0.4,0.6,0.8,0.9,0.95,0.99,1)))
names(e_quantiles)[1] = "quantiles"
e_quantiles$quantiles = round(e_quantiles$quantiles,digits=2)
install.packages('reldist')
library(reldist)
e_quantiles = data.frame(wtd.quantile(y$earining/1000,
q=c(0,0.01,0.05,0.1,0.2,0.4,0.6,0.8,0.9,0.95,0.99,1),
weight = y$data.WGT))
names(e_quantiles)[1] = "quantiles"
e_quantiles$quantiles = round(e_quantiles$quantiles,digits=2)
top1_low40 = (1- wtd.quantile(y$earining,q = 0.99,weight = y$data.WGT))/wtd.quantile(y$earining,q = 0.4,weight = y$data.WGT)
top1_low40 = wtd.quantile(y$earining,q = -0.01,weight = y$data.WGT)/wtd.quantile(y$earining,q = 0.4,weight = y$data.WGT)
top1_low40 = (wtd.quantile(y$earining,q = 1,weight = y$data.WGT)-
wtd.quantile(y$earining,q = 0.99,weight = y$data.WGT))/
wtd.quantile(y$earining,q = 0.4,weight = y$data.WGT)
top1_low40 = (wtd.quantile(y$earining,q = 1,weight = y$data.WGT)-
wtd.quantile(y$earining,q = 0.99,weight = y$data.WGT))/wtd.quantile(y$earining,q = 0.4,weight = y$data.WGT)
wtd.quantile(y$earining,q = 1,weight = y$data.WGT
wtd.quantile(y$earining,q = 1,weight = y$data.WGT
wtd.quantile(y$earining,q = 1,weight = y$data.WGT)
wtd.quantile(y$earining,q = 0.99,weight = y$data.WGT)
wtd.quantile(y$earining,q = 0.4,weight = y$data.WGT)
top1_low40 = (quantile(y$earining,probs = 1)-
quantile(y$earining,probs = 0.99))/quantile(y$earining,probs = 0.4)
## Coefficient of Variation of earning
sd(y$earining, na.rm=TRUE)/
mean(y$earining, na.rm=TRUE)*100
sd(y$earining, na.rm=TRUE)
install.packages('Weighted.Desc.Stat')
library(Weighted.Desc.Stat)
## Coefficient of Variation of earning
w.cv(y$earining,y$data.WGT)
## Coefficient of Variation of earning
round(w.cv(y$earining,y$data.WGT),digits = 2)
## Coefficient of Variation of earning
round(w.cv(y$earining,y$data.WGT),digits = 3)
## Coefficient of Variation of earning
round(w.cv(y$earining,y$data.WGT),digits = 2)
## Variance of the logs
round(w.cv(log(y$earining),y$data.WGT),digits = 2)
install.packages('acid')
library('acid')
## Variance of the logs
round(w.var(log(y$earining),y$data.WGT),digits = 2)
## Variance of the logs
lg = log(y$earining)
## Variance of the logs
lg = !(is.na(log(y$earining))
## Variance of the logs
lg = !is.na(log(y$earining)
## Variance of the logs
lg = !is.na(log(y$earining))
## Variance of the logs
lg = !(is.na(log(y$earining)))
## Variance of the logs
lg = data.framt(log(y$earining))
## Variance of the logs
lg = data.frame(log(y$earining))
lg = lg[!(is.na(lg$log.y.earining.))]
lg = lg[!(is.na(lg$log.y.earining.)),]
## Variance of the logs
lg = data.frame(log(y$earining))
lg = lg[!(is.na(lg$log.y.earining.)),]
round(w.var(lg,y$data.WGT),digits = 2)
## Gini index
weighted.gini(y$earining,w = y$data.WGT)
## Gini index
round(weighted.gini(y$earining,w = y$data.WGT),digits = 2)
## Gini index
round(weighted.gini(y$earining,w = y$data.WGT),digits = 2)
## Gini index
weighted.gini(y$earining,w = y$data.WGT)
## Location of mean
wtd.quantile(y$earining/1000,q=0.5,weight = y$data.WGT)
## Location of mean
wtd.quantile( y$earining/1000, q = 0.5,weight = y$data.WGT)
## Location of mean
wtd.quantile(y$earining, q = 0.5, weight = y$data.WGT)
library(reldist)
## Location of mean
wtd.quantile(y$earining, q = 0.5, weight = y$data.WGT)
e_quantiles = data.frame(wtd.quantile(y$earining/1000,
q=c(0,0.01,0.05,0.1,0.2,0.4,0.6,0.8,0.9,0.95,0.99,1),
weight = y$data.WGT))
install.packages('reldist')
library(reldist)
library(Weighted.Desc.Stat)
y = data.frame(data$YY1,data$Y1,data$WGT,data$WAGEINC,
data$INCOME,data$INCCAT,data$BUSSEFARMINC,data$INTDIVINC,
data$SSRETINC,data$KGINC)  ## income
y[,4:10] = y[,4:10]*0.88  # converting 2016 USD to 2007 USD
y$earining = y$data.WAGEINC + 0.863*y$data.BUSSEFARMINC # constructing earning
e_quantiles = data.frame(wtd.quantile(y$earining/1000,
q=c(0,0.01,0.05,0.1,0.2,0.4,0.6,0.8,0.9,0.95,0.99,1),
weight = y$data.WGT))
e_quantiles = data.frame(wtd.quantile(y$earining/1000,
q=c(0,0.01,0.05,0.1,0.2,0.4,0.6,0.8,0.9,0.95,0.99,1),
weight = y$data.WGT))
e_quantiles = data.frame(wtd.quantile(y$earining/1000,
q=c(0,0.01,0.05,0.1,0.2,0.4,0.6,0.8,0.9,0.95,0.99,1),
weight = y$data.WGT))
y = data.frame(data$YY1,data$Y1,data$WGT,data$WAGEINC,
data$INCOME,data$INCCAT,data$BUSSEFARMINC,data$INTDIVINC,
data$SSRETINC,data$KGINC)  ## income
data = readxl::read_xlsx('SCFP2007.xlsx')
setwd("~/Desktop/advanced macro")
setwd("~/Desktop/advanced macro")
data = readxl::read_xlsx('SCFP2007.xlsx')
setwd("~/Documents/GitHub/ps1-data-dxkdxkdxkdxk")
y = data.frame(data$YY1,data$Y1,data$WGT,data$WAGEINC,
data$INCOME,data$INCCAT,data$BUSSEFARMINC,data$INTDIVINC,
data$SSRETINC,data$KGINC)  ## income
y[,4:10] = y[,4:10]*0.88  # converting 2016 USD to 2007 USD
y$earining = y$data.WAGEINC + 0.863*y$data.BUSSEFARMINC # constructing earning
e_quantiles = data.frame(wtd.quantile(y$earining/1000,
q=c(0,0.01,0.05,0.1,0.2,0.4,0.6,0.8,0.9,0.95,0.99,1),
weight = y$data.WGT))
